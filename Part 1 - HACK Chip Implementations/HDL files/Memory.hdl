// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

 /**
 * Addresses dictionary:
 * RAM16K
 * Decimal: 0:16383
 * Binary: 0000000000000000:0011111111111111
 * 
 * Screen
 * Decimal: 16384:24575
 * Binary: 0100000000000000:0101111111111111
 * 
 * Keyboard
 * Decimal: 24576
 * Binary: 0110000000000000
 * 
 * We can see that address[13..14] can tell us which chip we need to choose:
 *  a[14]  a[13]   Part
 * ------------------------
 *    0     0     RAM16K
 *    0     1     RAM16K
 *    1     0     Screen
 *    1     1    Keyboard
 */

 CHIP Memory {
 
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	
	// Initialize 3 load bits in order to choose the right chip, based on the hint above
	DMux4Way(in=load ,sel=address[13..14] ,a=loadRam1 ,b=loadRam2 ,c=loadScreen ,d=loadKeyboard);
	Or(a=loadRam1, b=loadRam2, out=loadRam);
	
	// Get all Memory[address(t)] possibilities
	RAM16K(in=in ,load=loadRam ,address=address[0..13] ,out=ramOut );
	Screen(in=in ,load=loadScreen ,address=address[0..12] ,out=screenOut );
	Keyboard(out=keyboardOut);
	
	// Mux out the right output based on the given address
	Mux4Way16(a=ramOut ,b=ramOut ,c=screenOut ,d=keyboardOut ,sel=address[13..14] ,out=out );
	
}