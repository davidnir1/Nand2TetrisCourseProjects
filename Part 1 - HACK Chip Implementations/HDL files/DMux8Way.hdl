// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
/**
* Call DMux4Way on a,b,c,d and on e,f,g,h with sel[0..1].
* The first half (a,b,c,d) will be chosen if sel[2] is 0, so
* we negate it and use an And gate to set it's output value.
* Then do the same thing with the And's (without negating sel[2]) for
* the MSD half.
*/
    DMux4Way(in=in,sel=sel[0..1],a=aa,b=bb,c=cc,d=dd);
    DMux4Way(in=in,sel=sel[0..1],a=ee,b=ff,c=gg,d=hh);
    Not(in=sel[2],out=ns2);
    And(a=ns2,b=aa,out=a);
    And(a=ns2,b=bb,out=b);
    And(a=ns2,b=cc,out=c);
    And(a=ns2,b=dd,out=d);
    And(a=sel[2],b=ee,out=e);
    And(a=sel[2],b=ff,out=f);
    And(a=sel[2],b=gg,out=g);
    And(a=sel[2],b=hh,out=h);


}