/**
	Class which represents a game of Snake.
	It handles everything from above, starting from initiation of various assets through looping and ending with an option to restart the process
	when the player wants another go at the game.
	The game works by showing the player a greeting screen which allows setting the game speed, then running the game and on lose/player exit, it shows
	a score screen which shows the score the player got and offeres the player another round.
	Each screen works by running a loop which receives inputs from the user and runs various computations in each iteration.
	Objects from this class use the Snake object and the GameMap object to run the game.
*/
class SnakeGame {
	
	field int score;
	field int roundDelay; // this is the actual number that will affect the game's speed, currently it's set at 600 minus 60 times what the player chose
	field int gameSpeed; // this is the speed modifier chosen by the player
	field Snake snake;
	field GameMap map;
	
	/**
		Constructor for the SnakeGame class.
		It starts by creating a Snake object and placing it in a default position.
		It then creates a GameMap object (this is used throughout the class) with the Snake object.
		Then it initializes some values.
	*/
	constructor SnakeGame new() {
		let snake = Snake.new(2,16,133); // default values
		let map = GameMap.new(snake);
		let score = 0;
		let roundDelay = 600; // default, actual delay will be roundDelay - 60*gameSpeed
		let gameSpeed = 5; // default, minimum speed is 1 and maximum speed is 9
		return this;
	} 
	
	/**
		Method which cleares the screen, and causes the object to reset it's starting values, to prepare for another game.
	*/
	method boolean restartGame() {
	 // clear the screen
	do Screen.clearScreen();
	// setting default values
		do snake.reset(2,16,133); 
		do map.reset();
		let score = 0;
		let roundDelay = 600;
		let gameSpeed = 5;
		return runGame();
	}
		
	/**
		The method called by the Main class, this method handles everything from the greeting window to indicating a restart by the player.
	*/
	method boolean runGame() {
		var boolean exit;
		var int score;
		var boolean playAgain;
		let exit = greetingWindow(); // greet the player and receive the player's chosen speed and indication on playing or quitting
		if(exit){ // the player chose to quit
			return false;
		}
		// since the player is brave enough not to quit, prepare the battlefield!
		do Drawer.prepareGameScreen(); 
		// run the main loop, which will return the player's score when he inevitably loses (ha-ha-ha)
		let score = mainLoop();
		// show the player the score screen and receive the player's choice (restart or quit)
		let playAgain = scoreWindow(score); 
		return playAgain;
	} 
	

	/**
		This method greets the player with informative information and receives the player's inputs.
	*/
	method boolean greetingWindow() {
		var boolean keepLooping;
		var char currentKey;
		let keepLooping = true;
		// present the actual screen with the instructions
		do Drawer.printInstructions(gameSpeed);
		while(keepLooping) {
			// get user input
			let currentKey = Keyboard.keyPressed();
			if(~(currentKey = 0)){ // a key was pressed (we check this to minimize the actions we perform)
				// case: user pressed the exit key (esc)
				if(currentKey = 140){ // 140 = ESC
					// exit the program
					return true;
				}
				// case: user pressed the start key (enter or space)
				if((currentKey = 128) | (currentKey = 32)){ // 128 = ENTER, 32 = SPACE
					let roundDelay = roundDelay - (gameSpeed * 60); // the computation of the game's real speed modifier
					// start the game
					return false;
				}
				// case: user pressed the gameSpeed++ key (up arrow)
				if((currentKey = 131) & (gameSpeed < 9)){ // 131 = UP key
					let gameSpeed = gameSpeed + 1;
				}
				// case: user pressed the gameSpeed-- key (down arrow)
				if((currentKey = 133) & (gameSpeed > 1)){ // 133 = DOWN key
					let gameSpeed = gameSpeed - 1;
				}
			}
			// set the cursor to the right position and print the current speed indicator (1 to 10) based on this.speed
			do Output.moveCursor(11,39);
			do Output.printInt(gameSpeed);
			do Sys.wait(100); // we don't need to refresh so fast, so here's a wait call
			
		}// end of loop
		return false; // should be unreachable
	} 
		
	/**
		The main loop for this game, it handles the game part of this program.
		It works by looping while the player didn't press ESC or lose.
		On each iteration, the following things happen, in this order:
			Get player inputs
			Get the snake to do it's part of the work
			Get the map to do it's part of the map and check any collisions for us
			Get the drawer to refresh the screen with the current game's state
		In each iteration, we have an inner loop which causes the wanted delay (effectively setting the game's speed like the user wanted).
		In each iteration of the inner loop, we check for user input, this is done a lot of times, to make the game more responsive.
	*/
	method int mainLoop(){
		var boolean snakeAteSomething; // this is true if the snake ate something, false otherwise
		var char currentKey, newDirection; // currentKey holds the current key pressed, newDirection holds the last direction chosen by the user
		var int delayCounter, collisionCode; // delayCounter set's the game's speed, collisionCode holds information about events in the game
		var boolean gameOn; // true if the game is still on, false if the user quit or lost
		let newDirection = 0;
		let snakeAteSomething = false;
		let collisionCode = 0;
		let gameOn = true;
		while(gameOn){
			let delayCounter = 0;
			while(delayCounter < roundDelay){ // do small delays while checking user input, this will help with responsivness.
				let currentKey = Keyboard.keyPressed();
				if(~(currentKey = 0)){ // a key was pressed
					if(currentKey = 140){ // 140 = ESC
						let gameOn = false; // quit the game
					}
					// LEFT(130) UP(131) RIGHT(132) DOWN(133)
					if((currentKey > 129) & (currentKey < 134)){
						let newDirection = currentKey; // remmember the direction chosen by the user
					}							
				}
				// we do this iteration so many times in order to improve responsiveness to user input
				do Sys.wait(1); 
				let delayCounter = delayCounter + 1;
			} // end of inner loop
			if(~(newDirection = 0)){ // the player wants to change snake direction
				do snake.setDirection(newDirection);
				let newDirection = 0;
			}
			// do all snake related stuff (advance, list manipulation, etc)
			do snake.doSnakeStuff(snakeAteSomething);
			// do all map related stuff (check collisions, spawn food, etc)
			// collisionCode = {0 if nothing, 1 if food collision, 2 if bad collision, 3 if poop collision}
			let collisionCode = map.doMapStuff(snake);
			if (collisionCode = 2){ // case: self collision or wall collision happened and the player lost, so game over
				let gameOn = 0;
			}
			if ((collisionCode = 3)){ // case: snake ate poop
				if (score > 2){
					let score = score - collisionCode;
				}
				else{ // in case the player is a noob and the poop eating penalty is higher than the player's score
					let score = 0;
				}
				let snakeAteSomething = true;	
			}
			if (collisionCode = 1){ // case: snake ate tasty food
				let snakeAteSomething = true;
				let score = score + collisionCode;
			}
			if (collisionCode = 0){ // case: snake didn't eat anything
				let snakeAteSomething = false;
			}			
			// update the screen with the current state of the game
			do Drawer.printCurrentGameState(map, snake, score, snakeAteSomething);
		} // end of outer loop
		
		return score;
	}
	
	/**
		Method which receives a score and shows it to the player to mock them, also suggests another round or to quit the game.
		Based on user choice it returns true (play again) or false (quit).
	*/
	method boolean scoreWindow(int score){
	    var boolean playAgain;
		var boolean keepLooping;
		var char currentKey;
		let keepLooping = true;
		// print the actual screen with the information and score
		do Drawer.printScore(score);
		while(keepLooping) {
			let currentKey = Keyboard.keyPressed();
			if(~(currentKey = 0)){ // a key was pressed
				// case: user pressed the exit key (esc)
				if(currentKey = 140){ // 140 = ESC
					return false; // exit the program
				}
				// case: user pressed the restart key (enter or space)
				if((currentKey = 128) | (currentKey = 32)){ // 128 = ENTER, 32 = SPACE
					do Sys.wait(500); // to avoid an edge case where the ENTER/SPACE from the restart choice registers in the greeting window too
					return true; // restart the game
				}
			}
		}
		return false; // should be unreachable
	}
	
}
	
