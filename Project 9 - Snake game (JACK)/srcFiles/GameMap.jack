/**
	Class which represents the map in a Snake game.
	It handles the Food objects, checking collisions and providing useful information to other classes.
*/
class GameMap {
	
	field Food activeFood; // pointer to the food on the map
	field Food activePoop; // pointer to the poop on the map
	field int poopCooldown; // everytime this counter reaches 0, a poop is spawned
	field boolean poopExists; // this keeps track of the poop's existence on the map, generally the poop won't affect the game if this is false

	/**
		Constructor for the GameMap class.
		It receives a Snake object and it then creates food objects and sets some default values.
	*/
	constructor GameMap new(Snake snake) {
		let activeFood = Food.new(true, 3, 10, snake);
		let activePoop = Food.new(false, 2, 2, snake); // poop is spawned at 2,2 for no reason, just some default values
		let poopExists = false; // false since we allow the snake to poop only from length 5
		let poopCooldown = 30; // set the poop's default cooldown
		return this;	
	}
	
	// ################################################# Getter Methods #############################################################
	
	method Food getFood(){
		return activeFood;
	}
	
	method boolean poopAlive(){
		return poopExists;
	}
	
	method Food getPoop(){
		return activePoop;
	}

	// ################################################ Other Methods #################################################################

	/**
		Method which resets some values and respawns the food on the map, to prepare for another round of Snake.
	*/
	method void reset(){
		do activeFood.respawn(3,10);
		let poopExists = false;
		let poopCooldown = 30;
		return;
	}

	/**
		Method which receives a snake object and handles food maintenance (respawning, etc), also checks for collisions.
		Returns the correct collision code.
	*/
	method int doMapStuff(Snake snake) {
		// check collisions
		var int collisionCode;
		var Node head, tail;
		var int tailX, tailY, xSeed, ySeed;
		// prepare seeds for randomization
		let xSeed = activeFood.getX()+activePoop.getX();
		let ySeed = activeFood.getY()+activePoop.getY();
		if(snake = null){ // sanity check
			return 0;
		}
		let collisionCode = getCollisionCode(snake);
		if(collisionCode = 2) { // if a game ending collision occured
			return collisionCode;
		}
		// get the food to do it's part of the work, and respawn it if it died
		if(activeFood.doFoodStuff()){
			do activeFood.respawn(Drawer.generateRandomX(xSeed), Drawer.generateRandomY(ySeed));
		}
		// if the poop cooldown reached 0 and the snake is of proper length, we can respawn the poop and make it usable
		if (poopCooldown < 1 & snake.getLength() > 5) { // it's time to poop!
			// since the snake poops from it's rear, we need the coordinates
			let tail = snake.getTail();
			let tailX = tail.getX();
			let tailY = tail.getY();
			do activePoop.respawn(tailX, tailY);
			let poopExists = true;
			// prepare cooldown for when the poop dies
			let poopCooldown = 30;
		}
		if (~poopExists) { // decrement cooldown counter since no live poop exists
			let poopCooldown = poopCooldown - 1;
		}
		else{ // if poop is alive
			if(activePoop.doFoodStuff()){ // if the poop died we need to reset counter and respawn
				if(~(snake.isTouching(activePoop.getX(),activePoop.getY()))){ // make sure we don't delete parts of the snake
					do Drawer.clearCell(activePoop.getX(),activePoop.getY());
				}
				let poopCooldown = 30;
				let poopExists = false;
			}
		}
		return collisionCode;
	}
	
	/**
		Method which receives a snake object and checks if it collides with any part of the map.
		Returns the following integers which represent collision codes:
			0 - nothing happened
			1 - collision with food
			2 - collision with self or wall
			3 - collision with poop
	*/
	method int getCollisionCode(Snake snake){
		var int collisionCode;
		var int xSeed,ySeed;
		let collisionCode = 0;
		if(snake.selfCollision() | GameMap.checkCollisionWithWall(snake)){ // snake died, game over
			let collisionCode = 2;
		}
		else{
			if(checkFoodCollision(snake)){ // snake ate food so respawn the food 
				let xSeed = activeFood.getX();
				let ySeed = activeFood.getY();
				do activeFood.respawn(Drawer.generateRandomX(xSeed), Drawer.generateRandomY(ySeed));
				let collisionCode = 1;
			}
			if((poopExists) & (checkPoopCollision(snake))){ // snake ate poop so indicate the poop died and reset counter
				let collisionCode = 3;
				let poopExists = false; // since this poop was just eaten, we now wait for another cooldown period
				let poopCooldown = 30;
			}
		}
		return collisionCode;
	}
	
	/**
		Method which receives a snake object and returns true if it collided with some poop on the map, false otherwise.
	*/
	method boolean checkPoopCollision(Snake snake){
		var boolean xCollision;
		var boolean yCollision;
		var Node head;
		let head = snake.getHead();
		if(head = null){
			return false;
		}
		let xCollision = (head.getX() = activePoop.getX());
		let yCollision = (head.getY() = activePoop.getY());
		return (xCollision & yCollision);
	}
	
	/**
		Method which receives a snake object and returns true if it collided with food on the map, false otherwise.
	*/
	method boolean checkFoodCollision(Snake snake){
		var boolean xCollision;
		var boolean yCollision;
		var Node head;
		let head = snake.getHead();
		if(head = null){
			return false;
		}
		let xCollision = (head.getX() = activeFood.getX());
		let yCollision = (head.getY() = activeFood.getY());
		return (xCollision & yCollision);
	}
	
	/**
		Method which receives a snake object and returns true if it collided with a wall, false otherwise.
	*/
	function boolean checkCollisionWithWall(Snake snake){
		var boolean left, right, top, bottom;
		var Node head;
		var int snakeX, snakeY;
		let head = snake.getHead();
		if(head = null){
			return false;
		}
        let snakeX = head.getX();
		let snakeY = head.getY();
		let top = (snakeX < 1);
		let bottom = (snakeX > 14);
		let left = (snakeY < 1);
		let right = (snakeY > 30);
		return (top | bottom | left | right);
	}

} // end of GameMap
