function LinkedList.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push pointer 0
push argument 0
push argument 1
call Node.new 2
call LinkedList.addFirstNode 2
pop temp 0
push pointer 0
return
function LinkedList.reset 2
push argument 0
pop pointer 0
push this 0
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
pop local 1
push local 0
call Node.getNext 1
pop local 0
push pointer 0
push local 1
call LinkedList.deAllocNode 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop this 0
push constant 0
pop this 1
push constant 0
pop this 2
push pointer 0
push argument 1
push argument 2
call Node.new 2
call LinkedList.addFirstNode 2
pop temp 0
push constant 0
return
function LinkedList.addFirstNode 0
push argument 0
pop pointer 0
push argument 1
pop this 0
push argument 1
pop this 1
push constant 1
pop this 2
push constant 0
return
function LinkedList.add 0
push argument 0
pop pointer 0
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
call LinkedList.addFirstNode 2
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push this 0
call Node.setNext 2
pop temp 0
push this 0
push argument 1
call Node.setFormer 2
pop temp 0
push argument 1
pop this 0
push this 2
push constant 1
add
pop this 2
push this 2
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
call Node.getNext 1
pop this 1
label IF_FALSE1
push constant 0
return
function LinkedList.removeTail 2
push argument 0
pop pointer 0
push this 1
pop local 1
push this 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 2
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop this 0
push constant 0
pop this 1
push constant 0
pop this 2
push pointer 0
push local 1
call LinkedList.deAllocNode 2
pop temp 0
push constant 0
return
label IF_FALSE1
push this 2
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push this 0
call LinkedList.addFirstNode 2
pop temp 0
push this 0
push constant 0
call Node.setNext 2
pop temp 0
push this 0
push constant 0
call Node.setFormer 2
pop temp 0
push pointer 0
push local 1
call LinkedList.deAllocNode 2
pop temp 0
push constant 0
return
label IF_FALSE2
push this 1
call Node.getFormer 1
pop local 0
push local 0
push constant 0
call Node.setNext 2
pop temp 0
push pointer 0
push local 1
call LinkedList.deAllocNode 2
pop temp 0
push local 0
pop this 1
push this 2
push constant 1
sub
pop this 2
push constant 0
return
function LinkedList.deAllocNode 0
push argument 0
pop pointer 0
push argument 1
push constant 0
call Node.setNext 2
pop temp 0
push argument 1
push constant 0
call Node.setFormer 2
pop temp 0
push argument 1
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function LinkedList.getHead 0
push argument 0
pop pointer 0
push this 0
return
function LinkedList.getTail 0
push argument 0
pop pointer 0
push this 1
return
function LinkedList.getLength 0
push argument 0
pop pointer 0
push this 2
return
function LinkedList.exists 1
push argument 0
pop pointer 0
push this 0
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
push argument 1
push argument 2
call Node.isEqual 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
call Node.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
