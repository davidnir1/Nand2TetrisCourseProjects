/** A static class that responsible for drawing and erasing the screen.
    This class holds some useful functions in order to allow each class
    to print/draw their current state on the screen */
class Drawer {

	/** This function receive (x,y) coordinate and return the right memory cell address */
    function int getMemoryLocation(int x, int y) {
		if(x>15){
			return 0;
		}
        return (512 * x) + y;
    }

	/** This function prepare the screen to a new game */
	function void prepareGameScreen(){
		var int count;
		do Screen.clearScreen();
		let count = 0;
		while(count < 32){
			do Drawer.blackenCell(0,count);
			do Drawer.blackenCell(15,count);
			let count = count + 1;
		}
		let count = 1;
		while(count < 15){
			do Drawer.blackenCell(count,0);
			do Drawer.blackenCell(count,31);
			let count = count + 1;
		}
		return;
	}

	/** This function draws the current game state */
	function void printCurrentGameState(GameMap map, Snake snake, int score, int ateFood){
		var boolean poopAlive;
		let poopAlive = map.poopAlive();
		if(poopAlive){
			do Drawer.drawFood(map.getPoop());
		}
		do Drawer.drawFood(map.getFood());  // Draw food
		do Drawer.drawSnake(snake, ateFood);  // Draw snake
		do Drawer.printBottomScore(score); // Print score
		return;
	}

    /** This function draws the correct sprite of the given food in the correct location */
	function void drawFood(Food food) {
		var int location;
		var bool foodType;
		var bool foodColor;
		let location = Drawer.getMemoryLocation(food.getX(),food.getY());
		let foodColor = food.getColor();
		let foodType = food.getType();

		if(foodType){ // this is food, not poop
			if(foodColor){ // white color
				do Drawer.drawWhiteFood(location);
			}
			else{
				do Drawer.drawBlackFood(location);
			}
		}
		else{ // this is poop, not food, yuck
			if(foodColor){ // white poop (lol)
				do Drawer.drawWhitePoop(location);
			}
			else{ // black poop
				do Drawer.drawBlackPoop(location);
			}
		}
		return;
	} // end of drawFood

    /** This function draw the snake in a current round.
        Note: only the new head position and the former head position should be changed.
        (former head position is now part of the body so it should be a fully black)
        The snake deletes his own tail only if he didn't eat it,
        and the rest of the buddy is already on the screen */
    function void drawSnake(Snake snake, boolean ateFood) {
        var Node head, tail;
        let head = snake.getHead();
        if(head = null) {
            return;
        }
        // Draw the new head cell
        do Drawer.drawSnakesHead(head.getX(), head.getY());
        // Change last head cell to body cell
        let head = head.getNext();
        if(~(head = null)) {
            do Drawer.drawSingleSnakeBodyCell(head.getX(), head.getY());
        }
        return;
    }

    /** Naive function that half-randomize the location of x */
    function int generateRandomX(int seed){
		var int output;
		var int temp;
		let output = seed * seed;
		let temp = 213*seed;
		let output = output+temp;
		let temp = Math.divide(output,16);
		let temp = temp * 16;
		let output = output-temp;
		if(output = 0){
			let output = output+1;
		}
		return output;
	}

    /** Naive function that half-randomize the location of y */
	function int generateRandomY(int seed){
		var int output;
		var int temp;
		let output = seed * seed;
		let temp = 213*seed;
		let output = output+temp;
		let temp = Math.divide(output,32);
		let temp = temp * 32;
		let output = output-temp;
		if(output = 0){
			let output = output+1;
		}
		return output;
	}

    /** Draw the white food in the given location */
	function void drawWhiteFood(int location) {
		var int memAddress;
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, 0);
		do Memory.poke(memAddress + 32, 1016);
		do Memory.poke(memAddress + 64, 1544);
		do Memory.poke(memAddress + 96, 3087);
		do Memory.poke(memAddress + 128, 2056);
		do Memory.poke(memAddress + 160, 2056);
		do Memory.poke(memAddress + 192, 14344);
		do Memory.poke(memAddress + 224, -6136);
		do Memory.poke(memAddress + 256, 14344);
		do Memory.poke(memAddress + 288, 2056);
		do Memory.poke(memAddress + 320, 2056);
		do Memory.poke(memAddress + 352, 3087);
		do Memory.poke(memAddress + 384, 1544);
		do Memory.poke(memAddress + 416, 1016);
		do Memory.poke(memAddress + 448, 0);
		do Memory.poke(memAddress + 480, 0);
		return;
	}

	/** Draw the black food in the given location */
	function void drawBlackFood(int location) {
		var int memAddress;
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, -1);
		do Memory.poke(memAddress + 32, -1017);
		do Memory.poke(memAddress + 64, -1545);
		do Memory.poke(memAddress + 96, -3088);
		do Memory.poke(memAddress + 128, -2057);
		do Memory.poke(memAddress + 160, -2057);
		do Memory.poke(memAddress + 192, -14345);
		do Memory.poke(memAddress + 224, 6135);
		do Memory.poke(memAddress + 256, -14345);
		do Memory.poke(memAddress + 288, -2057);
		do Memory.poke(memAddress + 320, -2057);
		do Memory.poke(memAddress + 352, -3088);
		do Memory.poke(memAddress + 384, -1545);
		do Memory.poke(memAddress + 416, -1017);
		do Memory.poke(memAddress + 448, -1);
		do Memory.poke(memAddress + 480, -1);
		return;
	}

	/** Draw the white poop in the given location */
	function void drawWhitePoop(int location) {
		var int memAddress;
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, 4096);
		do Memory.poke(memAddress + 32, 4098);
		do Memory.poke(memAddress + 64, 226);
		do Memory.poke(memAddress + 96, 448);
		do Memory.poke(memAddress + 128, 996);
		do Memory.poke(memAddress + 160, 9188);
		do Memory.poke(memAddress + 192, 10224);
		do Memory.poke(memAddress + 224, 2184);
		do Memory.poke(memAddress + 256, 2728);
		do Memory.poke(memAddress + 288, 2728);
		do Memory.poke(memAddress + 320, 6284);
		do Memory.poke(memAddress + 352, 8188);
		do Memory.poke(memAddress + 384, 15390);
		do Memory.poke(memAddress + 416, 15934);
		do Memory.poke(memAddress + 448, 8188);
		do Memory.poke(memAddress + 480, 0);
		return;
	}

    /** Draw the black poop in the given location */
	function void drawBlackPoop(int location) {
		var int memAddress;
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, -4097);
		do Memory.poke(memAddress + 32, -4099);
		do Memory.poke(memAddress + 64, -227);
		do Memory.poke(memAddress + 96, -449);
		do Memory.poke(memAddress + 128, -997);
		do Memory.poke(memAddress + 160, -9189);
		do Memory.poke(memAddress + 192, -10225);
		do Memory.poke(memAddress + 224, -2185);
		do Memory.poke(memAddress + 256, -2729);
		do Memory.poke(memAddress + 288, -2729);
		do Memory.poke(memAddress + 320, -6285);
		do Memory.poke(memAddress + 352, -8189);
		do Memory.poke(memAddress + 384, -15391);
		do Memory.poke(memAddress + 416, -15935);
		do Memory.poke(memAddress + 448, -8189);
		do Memory.poke(memAddress + 480, -1);
		return;
	}

    /** Draws the snake's head */
    function void drawSnakesHead(int x, int y) {
    	var int memAddress;
    	let memAddress = 16384 + Drawer.getMemoryLocation(x, y);
    	do Memory.poke(memAddress + 0, 0);
    	do Memory.poke(memAddress + 32, 32766);
    	do Memory.poke(memAddress + 64, 32766);
    	do Memory.poke(memAddress + 96, 24582);
    	do Memory.poke(memAddress + 128, 24582);
    	do Memory.poke(memAddress + 160, 24582);
    	do Memory.poke(memAddress + 192, 24582);
    	do Memory.poke(memAddress + 224, 24582);
    	do Memory.poke(memAddress + 256, 24582);
    	do Memory.poke(memAddress + 288, 24582);
    	do Memory.poke(memAddress + 320, 24582);
    	do Memory.poke(memAddress + 352, 24582);
    	do Memory.poke(memAddress + 384, 24582);
    	do Memory.poke(memAddress + 416, 32766);
    	do Memory.poke(memAddress + 448, 32766);
    	do Memory.poke(memAddress + 480, 0);
    	return;
    }

    /** Draws a single snake body cell */
    function void drawSingleSnakeBodyCell(int x, int y) {
    	var int memAddress;
    	let memAddress = 16384 + Drawer.getMemoryLocation(x, y);
    	do Memory.poke(memAddress + 0, 0);
    	do Memory.poke(memAddress + 32, 32766);
    	do Memory.poke(memAddress + 64, 32766);
    	do Memory.poke(memAddress + 96, 32766);
    	do Memory.poke(memAddress + 128, 32766);
    	do Memory.poke(memAddress + 160, 32766);
    	do Memory.poke(memAddress + 192, 32766);
    	do Memory.poke(memAddress + 224, 32766);
    	do Memory.poke(memAddress + 256, 32766);
    	do Memory.poke(memAddress + 288, 32766);
    	do Memory.poke(memAddress + 320, 32766);
    	do Memory.poke(memAddress + 352, 32766);
    	do Memory.poke(memAddress + 384, 32766);
    	do Memory.poke(memAddress + 416, 32766);
    	do Memory.poke(memAddress + 448, 32766);
    	do Memory.poke(memAddress + 480, 0);
    	return;
    }

    /** This function darkens a given coordinate */
	function void blackenCell(int x, int y) {
		var int memAddress;
    	let memAddress = 16384 + Drawer.getMemoryLocation(x, y);
		do Memory.poke(memAddress + 0, -1);
		do Memory.poke(memAddress + 32, -1);
		do Memory.poke(memAddress + 64, -1);
		do Memory.poke(memAddress + 96, -1);
		do Memory.poke(memAddress + 128, -1);
		do Memory.poke(memAddress + 160, -1);
		do Memory.poke(memAddress + 192, -1);
		do Memory.poke(memAddress + 224, -1);
		do Memory.poke(memAddress + 256, -1);
		do Memory.poke(memAddress + 288, -1);
		do Memory.poke(memAddress + 320, -1);
		do Memory.poke(memAddress + 352, -1);
		do Memory.poke(memAddress + 384, -1);
		do Memory.poke(memAddress + 416, -1);
		do Memory.poke(memAddress + 448, -1);
		do Memory.poke(memAddress + 480, -1);
		return;
	}

    /** This function whitens a given coordinate */
    function void clearCell(int x, int y) {
    	var int memAddress;
    	let memAddress = 16384 + Drawer.getMemoryLocation(x, y);
    	do Memory.poke(memAddress + 0, 0);
    	do Memory.poke(memAddress + 32, 0);
    	do Memory.poke(memAddress + 64, 0);
    	do Memory.poke(memAddress + 96, 0);
    	do Memory.poke(memAddress + 128, 0);
    	do Memory.poke(memAddress + 160, 0);
    	do Memory.poke(memAddress + 192, 0);
    	do Memory.poke(memAddress + 224, 0);
    	do Memory.poke(memAddress + 256, 0);
    	do Memory.poke(memAddress + 288, 0);
    	do Memory.poke(memAddress + 320, 0);
    	do Memory.poke(memAddress + 352, 0);
    	do Memory.poke(memAddress + 384, 0);
    	do Memory.poke(memAddress + 416, 0);
    	do Memory.poke(memAddress + 448, 0);
    	do Memory.poke(memAddress + 480, 0);
    	return;
    }

	/** This function prints a welcome page with game instructions */
	function void printInstructions(int gameSpeed){
		var String welcomeMsg, optionsMsg, speedMsg, gameSpd;
		let welcomeMsg = "Welcome to Snake game";
		let optionsMsg = "Press ENTER or SPACE to start, or ESC to quit";
		let speedMsg = "Press UP to increase speed or DOWN to decrease speed";
		let gameSpd = "Game speed:";
		do Output.moveCursor(5,22);
		do Output.printString(welcomeMsg);
		do Output.moveCursor(7,11);
		do Output.printString(optionsMsg);
		do Output.moveCursor(9,7);
		do Output.printString(speedMsg);
		do Output.moveCursor(11,26);
		do Output.printString(gameSpd);
		do welcomeMsg.dispose();
		do optionsMsg.dispose();
		do speedMsg.dispose();
		do gameSpd.dispose();
		return;
	}

    /** This function prints a game over screen with player's score */
    function void printScore(int score){
		var String gameOverMsg, restartMsg, scoreMsg;
		let gameOverMsg = "Game Over!";
		let restartMsg = "Press ENTER or SPACE to start again, or ESC to quit";
		let scoreMsg = "Game score: ";
        do Screen.clearScreen();
        do Output.moveCursor(8,28);
        do Output.printString(gameOverMsg);
        do Output.moveCursor(10,6);
        do Output.printString(restartMsg);
        do Output.moveCursor(12,26);
        do Output.printString(scoreMsg);
        do Output.printInt(score);
		do gameOverMsg.dispose();
		do restartMsg.dispose();
		do scoreMsg.dispose();
        return;
    }

	/** This function print the current score in the bottom-center of the screen */
	function void printBottomScore(int score){
		// repaint int area to avoid leftover characters
		var String scoreMsg;
		let scoreMsg = "Score: ";
		do Drawer.blackenCell(15,18);
		do Output.moveCursor(22,29);
        do Output.printString(scoreMsg);
		do Output.printInt(score);
		do scoreMsg.dispose();
		return;
	}

} // end of Drawer class