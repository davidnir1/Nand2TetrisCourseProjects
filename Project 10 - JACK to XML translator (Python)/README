idan356, davidnir1
===============================================================================
Idan Gabay, ID 312415706, idan.gabay@mail.huji.ac.il
David Nir, ID 203487293, david.nir1@mail.huji.ac.il
===============================================================================

                           Project 10 - Compiler
                           -----------------------


Submitted Files
---------------
README - This file.
JackAnalyzer
Makefile
CompilationEngine.py
JackAnalyzer.py
JackTokenizer.py
Token.py
TokenTypes.py

Remarks
-------
In this project, we built the first part of the JACK compiler - it tokenizes the given JACK code and outputs 
the tokenization result into an XML file.
In the next project this will output VM translated code instead of the XML.
We worked according to the course suggested API, and built the project as future-proof as we can.

The way this works:
For each JACK file (we assume the JACK files are of valid syntax):
  Tokenize the file using the Tokenizer class (a Token is a string which has meaning in the Jack language) using regex and
  text analysis.
  Cause the CompilationEngine to use the Tokenizer in order to interpret the syntax of the JACK code, by
  analyzing each token aquired from the Tokenizer.
  Output everything into an XML file which represents the compiled version of the input JACK file.
