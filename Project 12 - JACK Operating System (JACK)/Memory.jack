// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048;
        let freeList[0] = null; // next
        let freeList[1] = 14333; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        var int x;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array current, currNext, block;
        var int currSize;
        if(~(size > 0)) {
            do Sys.error(5); // Allocated memory size must be positive
        }
        let current = freeList;
        while( ~(current = null) ) {
            // Get segment's size
            let currSize = current[1];

            // If current segment is big enough
            if(currSize > (size + 1)) {
                // Let block be the first cell in the new block
                let block = current + currSize - size;

                // Update new block next with null
                let block[0] = null;

                // Update new block size
                let block[1] = size;

                // Update current size
                let current[1] = currSize - size - 2;

                // Return a pointer to the first free cell in the new block
                return block + 2;
            }
            let current = current[0];
        }

        // If no segment is big enough -> heap overflow
        do Sys.error(6);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        
		let o = o - 2;
        let o[0] = freeList;
        let freeList = o;
        return;
		
    }    
}
