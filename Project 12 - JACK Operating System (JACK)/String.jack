// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length;
    field int maxLen;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        // Maximum length must be non-negative
        if(maxLength < 0) {
            do Sys.error(14);
        }
        if( maxLength > 0 ) {
            let arr = Array.new(maxLength);
        }
        let maxLen = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if( maxLen > 0 ) {
            do arr.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        // String index out of bounds
        if( (j < 0) | (j > length) ) {
            do Sys.error(15);
        }
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        // String index out of bounds
        if( (j < 0) | (j > length) ) {
            do Sys.error(16);
        }
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        // String is full
        if(length = maxLen) {
            do Sys.error(17);
        }
        let arr[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        // String is empty
        if(length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int output, counter, current;
        var boolean negative;
        if(length = 0) {
            return 0;
        }
        let counter = 0;
        let negative = false;
        let current = charAt(counter);
        let output = 0;
        if( (current = 45) & (length > 1) ) {
            let negative = true;
            let counter = 1;
            let current = charAt(counter);
        }
        while( (counter < length) & (current > 47) & (current < 58) ) {
            let output = (output * 10) + (current - 48);
            let counter = counter + 1;
            let current = charAt(counter);
        }
        if( negative ) {
            let output = -output;
        }
        return output;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if( val < 0 ) {
            do appendChar(45); // Add "-" sign
            let val = -val;
        }
        do setIntHelper(val, length);
        return;
    }

    /** Sets this string to hold a representation of the given val. */
    method void setIntHelper(int val, int counter) {
        var int lastDigit, temp;
        if( val < 10 ) {
            do appendChar(val + 48);
            return;
        }
        // Insufficient string capacity
        if( counter = maxLen ) {
            do Sys.error(19);
        }
        let temp = val / 10;
        let lastDigit = temp * 10;
        let lastDigit = val - lastDigit;
        do setIntHelper(temp, counter + 1);
        do appendChar(lastDigit + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

}
