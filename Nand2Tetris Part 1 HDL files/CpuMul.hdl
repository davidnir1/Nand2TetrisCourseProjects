/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
	 
// *******  ALU  *******

	// Check if A or C Instruction
    Not(in=instruction[15], out=aInst);
    Not(in=aInst, out=cInst);
    
	// If c-inst && A register is a destination -> insert ALU out value to A
	// Else insert instruction to A
    And(a=cInst, b=instruction[5], out=cAndA);
    Mux16(a=instruction, b=ALUOut, sel=cAndA, out=aRegValue);
	Or(a=aInst, b=cAndA, out=loadA);
    ARegister(in=aRegValue ,load=loadA ,out=aReg);
	
	// If c-Inst && D register is a destination -> insert ALU out value to D
    And(a=cInst, b=instruction[4], out=loadD);
	DRegister(in=ALUOut ,load=loadD ,out=dReg );
	
	// If M is a destination -> insert ALU out value to M
	Or16(a=false, b=aReg, out[0..14]=addressM);
	And(a=cInst, b=instruction[3], out=writeM);
	
	// Choose the right register (A or M) to work with, based on instruction[12]
	Mux16(a=aReg ,b=inM ,sel=instruction[12] ,out=amReg );
	
	// Make the wanted computation
	ExtendAlu(x=dReg, y=amReg, instruction=instruction[6..14], out=ALUOut, out=outM ,zr=zrOut ,ng=ngOut);

// *******  PC  *******

	// Check whether to jump or inc by 1
	And(a=zrOut, b=instruction[1], out=JEQ); // JEQ
	And(a=ngOut, b=instruction[2], out=JLT); // JLT
	
	Or(a=zrOut, b=ngOut, out=isLE); // JGT
	Not(in=isLE, out=isGT);
	And(a=isGT, b=instruction[0], out=JGT);
	
	Or(a=JEQ, b=JLT, out=JLE);
	Or(a=JLE, b=JGT, out=shouldJump);
	And(a=cInst, b=shouldJump, out=jump);
	
	// Check whether to inc by 1
	Not(in=jump, out=incByOne);

	// If reset == 1 jump to address 0
	// else if jump == 1 jump to the A(t-1)
	// else if incByOne == 1 jump to next address
	PC(in=aReg ,load=jump ,inc=incByOne ,reset=reset ,out[0..14]=pc);
	
}
